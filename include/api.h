#pragma once
#include<wininet.h>
typedef HMODULE(WINAPI* LoadLibraryAFunc)(_In_ LPCSTR lpLibFileName);
typedef int (WINAPI* MessageBoxAFunc)(_In_opt_ HWND hWnd, _In_opt_ LPCSTR lpText, _In_opt_ LPCSTR lpCaption, _In_ UINT uType);
typedef int (WINAPI* MessageBoxWFunc)(_In_opt_ HWND hWnd, _In_opt_ LPCWSTR lpText, _In_opt_ LPCWSTR lpCaption, _In_ UINT uType);
typedef LPVOID(WINAPI* VirtualAllocFunc)(_In_opt_ LPVOID lpAddress, _In_     SIZE_T dwSize, _In_     DWORD flAllocationType, _In_     DWORD flProtect);
typedef BOOL(WINAPI* VirtualProtectFunc)(_In_  LPVOID lpAddress, _In_  SIZE_T dwSize, _In_  DWORD flNewProtect, _Out_ PDWORD lpflOldProtect);
typedef HRSRC(WINAPI* FindResourceAFunc)(_In_opt_ HMODULE hModule, _In_     LPCSTR lpName, _In_     LPCSTR lpType);
typedef HGLOBAL(WINAPI* LoadResourceFunc)(_In_opt_ HMODULE hModule, _In_ HRSRC hResInfo);
typedef DWORD(WINAPI* SizeofResourceFunc)(_In_opt_ HMODULE hModule, _In_ HRSRC hResInfo);
typedef LPVOID(WINAPI* LockResourceFunc)(_In_ HGLOBAL hResData);
typedef HINTERNET(WINAPI* InternetOpenAFunc)(_In_opt_ LPCSTR lpszAgent, _In_ DWORD dwAccessType, _In_opt_ LPCSTR lpszProxy, _In_opt_ LPCSTR lpszProxyBypass, _In_ DWORD dwFlags);
typedef HINTERNET(WINAPI* InternetOpenUrlAFunc)(_In_ HINTERNET hInternet, _In_ LPCSTR lpszUrl, _In_reads_opt_(dwHeadersLength) LPCSTR lpszHeaders, _In_ DWORD dwHeadersLength, _In_ DWORD dwFlags, _In_opt_ DWORD_PTR dwContext);
typedef BOOL(WINAPI* CloseHandleFunc)(_In_ _Post_ptr_invalid_ HANDLE hObject);
typedef BOOL(WINAPI* InternetReadFileFunc)(_In_ HINTERNET hFile, _Out_writes_bytes_(dwNumberOfBytesToRead) __out_data_source(NETWORK) LPVOID lpBuffer, _In_ DWORD dwNumberOfBytesToRead, _Out_ LPDWORD lpdwNumberOfBytesRead);
typedef BOOL(WINAPI* InternetCloseHandleFunc)(_In_ HINTERNET hInternet);
typedef VOID(WINAPI* SleepFunc)(_In_ DWORD dwMilliseconds);
typedef void (*RtlMoveMemoryFunc)(void* Destination, const void* Source, size_t Length);
typedef DWORD(WINAPI* GetModuleFileNameAFunc)(_In_opt_ HMODULE hModule, _Out_writes_to_(nSize, ((return < nSize) ? (return +1) : nSize)) LPSTR lpFilename, _In_ DWORD nSize);
typedef HANDLE(WINAPI* CreateFileAFunc)(_In_ LPCSTR lpFileName, _In_ DWORD dwDesiredAccess, _In_ DWORD dwShareMode, _In_opt_ LPSECURITY_ATTRIBUTES lpSecurityAttributes, _In_ DWORD dwCreationDisposition, _In_ DWORD dwFlagsAndAttributes, _In_opt_ HANDLE hTemplateFile);
typedef BOOL(WINAPI* WriteFileFunc)(_In_ HANDLE hFile, _In_reads_bytes_opt_(nNumberOfBytesToWrite) LPCVOID lpBuffer, _In_ DWORD nNumberOfBytesToWrite, _Out_opt_ LPDWORD lpNumberOfBytesWritten, _Inout_opt_ LPOVERLAPPED lpOverlapped);
typedef BOOL(WINAPI* CloseHandleFunc)(_In_ _Post_ptr_invalid_ HANDLE hObject);
typedef HINSTANCE(WINAPI* ShellExecuteAFunc)(HWND   hwnd, LPCSTR lpOperation, LPCSTR lpFile, LPCSTR lpParameters, LPCSTR lpDirectory, INT    nShowCmd);
typedef BOOL(WINAPI* HttpQueryInfoAFunc)(_In_ HINTERNET hRequest, _In_ DWORD dwInfoLevel, _Inout_updates_bytes_to_opt_(*lpdwBufferLength, *lpdwBufferLength) __out_data_source(NETWORK) LPVOID lpBuffer, _Inout_ LPDWORD lpdwBufferLength, _Inout_opt_ LPDWORD lpdwIndex);
typedef DWORD(WINAPI* GetTempPathAFunc)(_In_ DWORD nBufferLength, _Out_writes_to_opt_(nBufferLength, return +1) LPSTR lpBuffer);
typedef VOID(WINAPI* ExitProcessFunc)(_In_ UINT uExitCode);
typedef HANDLE(WINAPI* CreateThreadFunc)(_In_opt_ LPSECURITY_ATTRIBUTES lpThreadAttributes, _In_ SIZE_T dwStackSize, _In_ LPTHREAD_START_ROUTINE lpStartAddress, _In_opt_ __drv_aliasesMem LPVOID lpParameter, _In_ DWORD dwCreationFlags, _Out_opt_ LPDWORD lpThreadId);
typedef DWORD(WINAPI* WaitForSingleObjectFunc)(_In_ HANDLE hHandle, _In_ DWORD dwMilliseconds);
typedef HRESULT(WINAPI* SHGetFolderPathAFunc)(HWND   hwnd, int    csidl, HANDLE hToken, DWORD  dwFlags, LPSTR  pszPath);
typedef LPSTR(WINAPI* GetCommandLineAFunc)(VOID);
typedef DWORD(WINAPI* GetModuleFileNameWFunc)(_In_opt_ HMODULE hModule, _Out_writes_to_(nSize, ((return < nSize) ? (return +1) : nSize)) LPWSTR lpFilename, _In_ DWORD nSize);
typedef int (WINAPI* MessageBoxWFunc)(_In_opt_ HWND hWnd, _In_opt_ LPCWSTR lpText, _In_opt_ LPCWSTR lpCaption, _In_ UINT uType);
typedef DWORD(WINAPI* GetFileAttributesAFunc)(_In_ LPCSTR lpFileName);
typedef PVOID(WINAPI* RtlAllocateHeapFunc)(PVOID  HeapHandle, ULONG  Flags, SIZE_T Size);
typedef HANDLE(WINAPI* GetProcessHeapFunc)(VOID);
typedef LPVOID(WINAPI* HeapAllocFunc)(_In_ HANDLE hHeap, _In_ DWORD dwFlags, _In_ SIZE_T dwBytes);
typedef HANDLE(WINAPI* GetProcessHeapFunc)(VOID);